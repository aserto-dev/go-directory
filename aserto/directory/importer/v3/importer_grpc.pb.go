// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: aserto/directory/importer/v3/importer.proto

package importer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Importer_Import_FullMethodName = "/aserto.directory.importer.v3.Importer/Import"
)

// ImporterClient is the client API for Importer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImporterClient interface {
	// import stream of objects and relations
	Import(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ImportRequest, ImportResponse], error)
}

type importerClient struct {
	cc grpc.ClientConnInterface
}

func NewImporterClient(cc grpc.ClientConnInterface) ImporterClient {
	return &importerClient{cc}
}

func (c *importerClient) Import(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ImportRequest, ImportResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Importer_ServiceDesc.Streams[0], Importer_Import_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ImportRequest, ImportResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Importer_ImportClient = grpc.BidiStreamingClient[ImportRequest, ImportResponse]

// ImporterServer is the server API for Importer service.
// All implementations should embed UnimplementedImporterServer
// for forward compatibility.
type ImporterServer interface {
	// import stream of objects and relations
	Import(grpc.BidiStreamingServer[ImportRequest, ImportResponse]) error
}

// UnimplementedImporterServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImporterServer struct{}

func (UnimplementedImporterServer) Import(grpc.BidiStreamingServer[ImportRequest, ImportResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedImporterServer) testEmbeddedByValue() {}

// UnsafeImporterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImporterServer will
// result in compilation errors.
type UnsafeImporterServer interface {
	mustEmbedUnimplementedImporterServer()
}

func RegisterImporterServer(s grpc.ServiceRegistrar, srv ImporterServer) {
	// If the following call pancis, it indicates UnimplementedImporterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Importer_ServiceDesc, srv)
}

func _Importer_Import_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImporterServer).Import(&grpc.GenericServerStream[ImportRequest, ImportResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Importer_ImportServer = grpc.BidiStreamingServer[ImportRequest, ImportResponse]

// Importer_ServiceDesc is the grpc.ServiceDesc for Importer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Importer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aserto.directory.importer.v3.Importer",
	HandlerType: (*ImporterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Import",
			Handler:       _Importer_Import_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "aserto/directory/importer/v3/importer.proto",
}
