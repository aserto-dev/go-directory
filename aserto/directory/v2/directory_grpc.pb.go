// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: aserto/directory/v2/directory.proto

package directory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DirectoryClient is the client API for Directory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectoryClient interface {
	GetObjectType(ctx context.Context, in *GetObjectTypeRequest, opts ...grpc.CallOption) (*GetObjectTypeResponse, error)
	SetObjectType(ctx context.Context, in *SetObjectTypeRequest, opts ...grpc.CallOption) (*SetObjectTypeResponse, error)
	DeleteObjectType(ctx context.Context, in *DeleteObjectTypeRequest, opts ...grpc.CallOption) (*DeleteObjectTypeResponse, error)
	ListObjectTypes(ctx context.Context, in *ListObjectTypesRequest, opts ...grpc.CallOption) (Directory_ListObjectTypesClient, error)
	GetRelationType(ctx context.Context, in *GetRelationTypeRequest, opts ...grpc.CallOption) (*GetRelationTypeResponse, error)
	SetRelationType(ctx context.Context, in *SetRelationTypeRequest, opts ...grpc.CallOption) (*SetRelationTypeResponse, error)
	DeleteRelationType(ctx context.Context, in *DeleteRelationTypeRequest, opts ...grpc.CallOption) (*DeleteRelationTypeResponse, error)
	ListRelationTypes(ctx context.Context, in *ListRelationTypesRequest, opts ...grpc.CallOption) (Directory_ListRelationTypesClient, error)
	GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error)
	SetPermission(ctx context.Context, in *SetPermissionRequest, opts ...grpc.CallOption) (*SetPermissionResponse, error)
	DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*DeletePermissionResponse, error)
	ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (Directory_ListPermissionsClient, error)
	GetRelationTypePermission(ctx context.Context, in *GetRelationTypePermissionRequest, opts ...grpc.CallOption) (*GetRelationTypePermissionResponse, error)
	SetRelationTypePermission(ctx context.Context, in *SetRelationTypePermissionRequest, opts ...grpc.CallOption) (*SetRelationTypePermissionResponse, error)
	DeleteRelationTypePermission(ctx context.Context, in *DeleteRelationTypePermissionRequest, opts ...grpc.CallOption) (*DeleteRelationTypePermissionResponse, error)
	ListRelationTypePermissions(ctx context.Context, in *ListRelationTypePermissionsRequest, opts ...grpc.CallOption) (Directory_ListRelationTypePermissionsClient, error)
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error)
	SetObject(ctx context.Context, in *SetObjectRequest, opts ...grpc.CallOption) (*SetObjectResponse, error)
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (Directory_ListObjectsClient, error)
	GetRelation(ctx context.Context, in *GetRelationRequest, opts ...grpc.CallOption) (*GetRelationResponse, error)
	SetRelation(ctx context.Context, in *SetRelationRequest, opts ...grpc.CallOption) (*SetRelationResponse, error)
	DeleteRelation(ctx context.Context, in *DeleteRelationRequest, opts ...grpc.CallOption) (*DeleteRelationResponse, error)
	ListRelations(ctx context.Context, in *ListRelationsRequest, opts ...grpc.CallOption) (Directory_ListRelationsClient, error)
	Loader(ctx context.Context, opts ...grpc.CallOption) (Directory_LoaderClient, error)
	ListObjectGraph(ctx context.Context, in *ListObjectGraphRequest, opts ...grpc.CallOption) (*ListObjectGraphResponse, error)
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
}

type directoryClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectoryClient(cc grpc.ClientConnInterface) DirectoryClient {
	return &directoryClient{cc}
}

func (c *directoryClient) GetObjectType(ctx context.Context, in *GetObjectTypeRequest, opts ...grpc.CallOption) (*GetObjectTypeResponse, error) {
	out := new(GetObjectTypeResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/GetObjectType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetObjectType(ctx context.Context, in *SetObjectTypeRequest, opts ...grpc.CallOption) (*SetObjectTypeResponse, error) {
	out := new(SetObjectTypeResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/SetObjectType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteObjectType(ctx context.Context, in *DeleteObjectTypeRequest, opts ...grpc.CallOption) (*DeleteObjectTypeResponse, error) {
	out := new(DeleteObjectTypeResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/DeleteObjectType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) ListObjectTypes(ctx context.Context, in *ListObjectTypesRequest, opts ...grpc.CallOption) (Directory_ListObjectTypesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Directory_ServiceDesc.Streams[0], "/aserto.directory.v2.Directory/ListObjectTypes", opts...)
	if err != nil {
		return nil, err
	}
	x := &directoryListObjectTypesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Directory_ListObjectTypesClient interface {
	Recv() (*ListObjectTypesResponse, error)
	grpc.ClientStream
}

type directoryListObjectTypesClient struct {
	grpc.ClientStream
}

func (x *directoryListObjectTypesClient) Recv() (*ListObjectTypesResponse, error) {
	m := new(ListObjectTypesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *directoryClient) GetRelationType(ctx context.Context, in *GetRelationTypeRequest, opts ...grpc.CallOption) (*GetRelationTypeResponse, error) {
	out := new(GetRelationTypeResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/GetRelationType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetRelationType(ctx context.Context, in *SetRelationTypeRequest, opts ...grpc.CallOption) (*SetRelationTypeResponse, error) {
	out := new(SetRelationTypeResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/SetRelationType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteRelationType(ctx context.Context, in *DeleteRelationTypeRequest, opts ...grpc.CallOption) (*DeleteRelationTypeResponse, error) {
	out := new(DeleteRelationTypeResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/DeleteRelationType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) ListRelationTypes(ctx context.Context, in *ListRelationTypesRequest, opts ...grpc.CallOption) (Directory_ListRelationTypesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Directory_ServiceDesc.Streams[1], "/aserto.directory.v2.Directory/ListRelationTypes", opts...)
	if err != nil {
		return nil, err
	}
	x := &directoryListRelationTypesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Directory_ListRelationTypesClient interface {
	Recv() (*ListRelationTypesResponse, error)
	grpc.ClientStream
}

type directoryListRelationTypesClient struct {
	grpc.ClientStream
}

func (x *directoryListRelationTypesClient) Recv() (*ListRelationTypesResponse, error) {
	m := new(ListRelationTypesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *directoryClient) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error) {
	out := new(GetPermissionResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/GetPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetPermission(ctx context.Context, in *SetPermissionRequest, opts ...grpc.CallOption) (*SetPermissionResponse, error) {
	out := new(SetPermissionResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/SetPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*DeletePermissionResponse, error) {
	out := new(DeletePermissionResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/DeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (Directory_ListPermissionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Directory_ServiceDesc.Streams[2], "/aserto.directory.v2.Directory/ListPermissions", opts...)
	if err != nil {
		return nil, err
	}
	x := &directoryListPermissionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Directory_ListPermissionsClient interface {
	Recv() (*ListPermissionsResponse, error)
	grpc.ClientStream
}

type directoryListPermissionsClient struct {
	grpc.ClientStream
}

func (x *directoryListPermissionsClient) Recv() (*ListPermissionsResponse, error) {
	m := new(ListPermissionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *directoryClient) GetRelationTypePermission(ctx context.Context, in *GetRelationTypePermissionRequest, opts ...grpc.CallOption) (*GetRelationTypePermissionResponse, error) {
	out := new(GetRelationTypePermissionResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/GetRelationTypePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetRelationTypePermission(ctx context.Context, in *SetRelationTypePermissionRequest, opts ...grpc.CallOption) (*SetRelationTypePermissionResponse, error) {
	out := new(SetRelationTypePermissionResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/SetRelationTypePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteRelationTypePermission(ctx context.Context, in *DeleteRelationTypePermissionRequest, opts ...grpc.CallOption) (*DeleteRelationTypePermissionResponse, error) {
	out := new(DeleteRelationTypePermissionResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/DeleteRelationTypePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) ListRelationTypePermissions(ctx context.Context, in *ListRelationTypePermissionsRequest, opts ...grpc.CallOption) (Directory_ListRelationTypePermissionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Directory_ServiceDesc.Streams[3], "/aserto.directory.v2.Directory/ListRelationTypePermissions", opts...)
	if err != nil {
		return nil, err
	}
	x := &directoryListRelationTypePermissionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Directory_ListRelationTypePermissionsClient interface {
	Recv() (*ListRelationTypePermissionsResponse, error)
	grpc.ClientStream
}

type directoryListRelationTypePermissionsClient struct {
	grpc.ClientStream
}

func (x *directoryListRelationTypePermissionsClient) Recv() (*ListRelationTypePermissionsResponse, error) {
	m := new(ListRelationTypePermissionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *directoryClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error) {
	out := new(GetObjectResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/GetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetObject(ctx context.Context, in *SetObjectRequest, opts ...grpc.CallOption) (*SetObjectResponse, error) {
	out := new(SetObjectResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/SetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (Directory_ListObjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Directory_ServiceDesc.Streams[4], "/aserto.directory.v2.Directory/ListObjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &directoryListObjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Directory_ListObjectsClient interface {
	Recv() (*ListObjectsResponse, error)
	grpc.ClientStream
}

type directoryListObjectsClient struct {
	grpc.ClientStream
}

func (x *directoryListObjectsClient) Recv() (*ListObjectsResponse, error) {
	m := new(ListObjectsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *directoryClient) GetRelation(ctx context.Context, in *GetRelationRequest, opts ...grpc.CallOption) (*GetRelationResponse, error) {
	out := new(GetRelationResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/GetRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetRelation(ctx context.Context, in *SetRelationRequest, opts ...grpc.CallOption) (*SetRelationResponse, error) {
	out := new(SetRelationResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/SetRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteRelation(ctx context.Context, in *DeleteRelationRequest, opts ...grpc.CallOption) (*DeleteRelationResponse, error) {
	out := new(DeleteRelationResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/DeleteRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) ListRelations(ctx context.Context, in *ListRelationsRequest, opts ...grpc.CallOption) (Directory_ListRelationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Directory_ServiceDesc.Streams[5], "/aserto.directory.v2.Directory/ListRelations", opts...)
	if err != nil {
		return nil, err
	}
	x := &directoryListRelationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Directory_ListRelationsClient interface {
	Recv() (*ListRelationsResponse, error)
	grpc.ClientStream
}

type directoryListRelationsClient struct {
	grpc.ClientStream
}

func (x *directoryListRelationsClient) Recv() (*ListRelationsResponse, error) {
	m := new(ListRelationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *directoryClient) Loader(ctx context.Context, opts ...grpc.CallOption) (Directory_LoaderClient, error) {
	stream, err := c.cc.NewStream(ctx, &Directory_ServiceDesc.Streams[6], "/aserto.directory.v2.Directory/Loader", opts...)
	if err != nil {
		return nil, err
	}
	x := &directoryLoaderClient{stream}
	return x, nil
}

type Directory_LoaderClient interface {
	Send(*LoaderRequest) error
	Recv() (*LoaderResponse, error)
	grpc.ClientStream
}

type directoryLoaderClient struct {
	grpc.ClientStream
}

func (x *directoryLoaderClient) Send(m *LoaderRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *directoryLoaderClient) Recv() (*LoaderResponse, error) {
	m := new(LoaderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *directoryClient) ListObjectGraph(ctx context.Context, in *ListObjectGraphRequest, opts ...grpc.CallOption) (*ListObjectGraphResponse, error) {
	out := new(ListObjectGraphResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/ListObjectGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/aserto.directory.v2.Directory/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryServer is the server API for Directory service.
// All implementations should embed UnimplementedDirectoryServer
// for forward compatibility
type DirectoryServer interface {
	GetObjectType(context.Context, *GetObjectTypeRequest) (*GetObjectTypeResponse, error)
	SetObjectType(context.Context, *SetObjectTypeRequest) (*SetObjectTypeResponse, error)
	DeleteObjectType(context.Context, *DeleteObjectTypeRequest) (*DeleteObjectTypeResponse, error)
	ListObjectTypes(*ListObjectTypesRequest, Directory_ListObjectTypesServer) error
	GetRelationType(context.Context, *GetRelationTypeRequest) (*GetRelationTypeResponse, error)
	SetRelationType(context.Context, *SetRelationTypeRequest) (*SetRelationTypeResponse, error)
	DeleteRelationType(context.Context, *DeleteRelationTypeRequest) (*DeleteRelationTypeResponse, error)
	ListRelationTypes(*ListRelationTypesRequest, Directory_ListRelationTypesServer) error
	GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error)
	SetPermission(context.Context, *SetPermissionRequest) (*SetPermissionResponse, error)
	DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionResponse, error)
	ListPermissions(*ListPermissionsRequest, Directory_ListPermissionsServer) error
	GetRelationTypePermission(context.Context, *GetRelationTypePermissionRequest) (*GetRelationTypePermissionResponse, error)
	SetRelationTypePermission(context.Context, *SetRelationTypePermissionRequest) (*SetRelationTypePermissionResponse, error)
	DeleteRelationTypePermission(context.Context, *DeleteRelationTypePermissionRequest) (*DeleteRelationTypePermissionResponse, error)
	ListRelationTypePermissions(*ListRelationTypePermissionsRequest, Directory_ListRelationTypePermissionsServer) error
	GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error)
	SetObject(context.Context, *SetObjectRequest) (*SetObjectResponse, error)
	DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error)
	ListObjects(*ListObjectsRequest, Directory_ListObjectsServer) error
	GetRelation(context.Context, *GetRelationRequest) (*GetRelationResponse, error)
	SetRelation(context.Context, *SetRelationRequest) (*SetRelationResponse, error)
	DeleteRelation(context.Context, *DeleteRelationRequest) (*DeleteRelationResponse, error)
	ListRelations(*ListRelationsRequest, Directory_ListRelationsServer) error
	Loader(Directory_LoaderServer) error
	ListObjectGraph(context.Context, *ListObjectGraphRequest) (*ListObjectGraphResponse, error)
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
}

// UnimplementedDirectoryServer should be embedded to have forward compatible implementations.
type UnimplementedDirectoryServer struct {
}

func (UnimplementedDirectoryServer) GetObjectType(context.Context, *GetObjectTypeRequest) (*GetObjectTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectType not implemented")
}
func (UnimplementedDirectoryServer) SetObjectType(context.Context, *SetObjectTypeRequest) (*SetObjectTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetObjectType not implemented")
}
func (UnimplementedDirectoryServer) DeleteObjectType(context.Context, *DeleteObjectTypeRequest) (*DeleteObjectTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjectType not implemented")
}
func (UnimplementedDirectoryServer) ListObjectTypes(*ListObjectTypesRequest, Directory_ListObjectTypesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListObjectTypes not implemented")
}
func (UnimplementedDirectoryServer) GetRelationType(context.Context, *GetRelationTypeRequest) (*GetRelationTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationType not implemented")
}
func (UnimplementedDirectoryServer) SetRelationType(context.Context, *SetRelationTypeRequest) (*SetRelationTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRelationType not implemented")
}
func (UnimplementedDirectoryServer) DeleteRelationType(context.Context, *DeleteRelationTypeRequest) (*DeleteRelationTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelationType not implemented")
}
func (UnimplementedDirectoryServer) ListRelationTypes(*ListRelationTypesRequest, Directory_ListRelationTypesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRelationTypes not implemented")
}
func (UnimplementedDirectoryServer) GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedDirectoryServer) SetPermission(context.Context, *SetPermissionRequest) (*SetPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPermission not implemented")
}
func (UnimplementedDirectoryServer) DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedDirectoryServer) ListPermissions(*ListPermissionsRequest, Directory_ListPermissionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedDirectoryServer) GetRelationTypePermission(context.Context, *GetRelationTypePermissionRequest) (*GetRelationTypePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationTypePermission not implemented")
}
func (UnimplementedDirectoryServer) SetRelationTypePermission(context.Context, *SetRelationTypePermissionRequest) (*SetRelationTypePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRelationTypePermission not implemented")
}
func (UnimplementedDirectoryServer) DeleteRelationTypePermission(context.Context, *DeleteRelationTypePermissionRequest) (*DeleteRelationTypePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelationTypePermission not implemented")
}
func (UnimplementedDirectoryServer) ListRelationTypePermissions(*ListRelationTypePermissionsRequest, Directory_ListRelationTypePermissionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRelationTypePermissions not implemented")
}
func (UnimplementedDirectoryServer) GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedDirectoryServer) SetObject(context.Context, *SetObjectRequest) (*SetObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetObject not implemented")
}
func (UnimplementedDirectoryServer) DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedDirectoryServer) ListObjects(*ListObjectsRequest, Directory_ListObjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (UnimplementedDirectoryServer) GetRelation(context.Context, *GetRelationRequest) (*GetRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelation not implemented")
}
func (UnimplementedDirectoryServer) SetRelation(context.Context, *SetRelationRequest) (*SetRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRelation not implemented")
}
func (UnimplementedDirectoryServer) DeleteRelation(context.Context, *DeleteRelationRequest) (*DeleteRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelation not implemented")
}
func (UnimplementedDirectoryServer) ListRelations(*ListRelationsRequest, Directory_ListRelationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRelations not implemented")
}
func (UnimplementedDirectoryServer) Loader(Directory_LoaderServer) error {
	return status.Errorf(codes.Unimplemented, "method Loader not implemented")
}
func (UnimplementedDirectoryServer) ListObjectGraph(context.Context, *ListObjectGraphRequest) (*ListObjectGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjectGraph not implemented")
}
func (UnimplementedDirectoryServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedDirectoryServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}

// UnsafeDirectoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectoryServer will
// result in compilation errors.
type UnsafeDirectoryServer interface {
	mustEmbedUnimplementedDirectoryServer()
}

func RegisterDirectoryServer(s grpc.ServiceRegistrar, srv DirectoryServer) {
	s.RegisterService(&Directory_ServiceDesc, srv)
}

func _Directory_GetObjectType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetObjectType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/GetObjectType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetObjectType(ctx, req.(*GetObjectTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetObjectType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetObjectTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetObjectType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/SetObjectType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetObjectType(ctx, req.(*SetObjectTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteObjectType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteObjectType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/DeleteObjectType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteObjectType(ctx, req.(*DeleteObjectTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_ListObjectTypes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListObjectTypesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DirectoryServer).ListObjectTypes(m, &directoryListObjectTypesServer{stream})
}

type Directory_ListObjectTypesServer interface {
	Send(*ListObjectTypesResponse) error
	grpc.ServerStream
}

type directoryListObjectTypesServer struct {
	grpc.ServerStream
}

func (x *directoryListObjectTypesServer) Send(m *ListObjectTypesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Directory_GetRelationType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetRelationType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/GetRelationType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetRelationType(ctx, req.(*GetRelationTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetRelationType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRelationTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetRelationType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/SetRelationType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetRelationType(ctx, req.(*SetRelationTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteRelationType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelationTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteRelationType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/DeleteRelationType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteRelationType(ctx, req.(*DeleteRelationTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_ListRelationTypes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRelationTypesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DirectoryServer).ListRelationTypes(m, &directoryListRelationTypesServer{stream})
}

type Directory_ListRelationTypesServer interface {
	Send(*ListRelationTypesResponse) error
	grpc.ServerStream
}

type directoryListRelationTypesServer struct {
	grpc.ServerStream
}

func (x *directoryListRelationTypesServer) Send(m *ListRelationTypesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Directory_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/GetPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetPermission(ctx, req.(*GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/SetPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetPermission(ctx, req.(*SetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/DeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeletePermission(ctx, req.(*DeletePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_ListPermissions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPermissionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DirectoryServer).ListPermissions(m, &directoryListPermissionsServer{stream})
}

type Directory_ListPermissionsServer interface {
	Send(*ListPermissionsResponse) error
	grpc.ServerStream
}

type directoryListPermissionsServer struct {
	grpc.ServerStream
}

func (x *directoryListPermissionsServer) Send(m *ListPermissionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Directory_GetRelationTypePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationTypePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetRelationTypePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/GetRelationTypePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetRelationTypePermission(ctx, req.(*GetRelationTypePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetRelationTypePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRelationTypePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetRelationTypePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/SetRelationTypePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetRelationTypePermission(ctx, req.(*SetRelationTypePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteRelationTypePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelationTypePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteRelationTypePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/DeleteRelationTypePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteRelationTypePermission(ctx, req.(*DeleteRelationTypePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_ListRelationTypePermissions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRelationTypePermissionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DirectoryServer).ListRelationTypePermissions(m, &directoryListRelationTypePermissionsServer{stream})
}

type Directory_ListRelationTypePermissionsServer interface {
	Send(*ListRelationTypePermissionsResponse) error
	grpc.ServerStream
}

type directoryListRelationTypePermissionsServer struct {
	grpc.ServerStream
}

func (x *directoryListRelationTypePermissionsServer) Send(m *ListRelationTypePermissionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Directory_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetObject(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/SetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetObject(ctx, req.(*SetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_ListObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListObjectsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DirectoryServer).ListObjects(m, &directoryListObjectsServer{stream})
}

type Directory_ListObjectsServer interface {
	Send(*ListObjectsResponse) error
	grpc.ServerStream
}

type directoryListObjectsServer struct {
	grpc.ServerStream
}

func (x *directoryListObjectsServer) Send(m *ListObjectsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Directory_GetRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/GetRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetRelation(ctx, req.(*GetRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/SetRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetRelation(ctx, req.(*SetRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/DeleteRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteRelation(ctx, req.(*DeleteRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_ListRelations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRelationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DirectoryServer).ListRelations(m, &directoryListRelationsServer{stream})
}

type Directory_ListRelationsServer interface {
	Send(*ListRelationsResponse) error
	grpc.ServerStream
}

type directoryListRelationsServer struct {
	grpc.ServerStream
}

func (x *directoryListRelationsServer) Send(m *ListRelationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Directory_Loader_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DirectoryServer).Loader(&directoryLoaderServer{stream})
}

type Directory_LoaderServer interface {
	Send(*LoaderResponse) error
	Recv() (*LoaderRequest, error)
	grpc.ServerStream
}

type directoryLoaderServer struct {
	grpc.ServerStream
}

func (x *directoryLoaderServer) Send(m *LoaderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *directoryLoaderServer) Recv() (*LoaderRequest, error) {
	m := new(LoaderRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Directory_ListObjectGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).ListObjectGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/ListObjectGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).ListObjectGraph(ctx, req.(*ListObjectGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.directory.v2.Directory/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Directory_ServiceDesc is the grpc.ServiceDesc for Directory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Directory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aserto.directory.v2.Directory",
	HandlerType: (*DirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetObjectType",
			Handler:    _Directory_GetObjectType_Handler,
		},
		{
			MethodName: "SetObjectType",
			Handler:    _Directory_SetObjectType_Handler,
		},
		{
			MethodName: "DeleteObjectType",
			Handler:    _Directory_DeleteObjectType_Handler,
		},
		{
			MethodName: "GetRelationType",
			Handler:    _Directory_GetRelationType_Handler,
		},
		{
			MethodName: "SetRelationType",
			Handler:    _Directory_SetRelationType_Handler,
		},
		{
			MethodName: "DeleteRelationType",
			Handler:    _Directory_DeleteRelationType_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _Directory_GetPermission_Handler,
		},
		{
			MethodName: "SetPermission",
			Handler:    _Directory_SetPermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _Directory_DeletePermission_Handler,
		},
		{
			MethodName: "GetRelationTypePermission",
			Handler:    _Directory_GetRelationTypePermission_Handler,
		},
		{
			MethodName: "SetRelationTypePermission",
			Handler:    _Directory_SetRelationTypePermission_Handler,
		},
		{
			MethodName: "DeleteRelationTypePermission",
			Handler:    _Directory_DeleteRelationTypePermission_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _Directory_GetObject_Handler,
		},
		{
			MethodName: "SetObject",
			Handler:    _Directory_SetObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _Directory_DeleteObject_Handler,
		},
		{
			MethodName: "GetRelation",
			Handler:    _Directory_GetRelation_Handler,
		},
		{
			MethodName: "SetRelation",
			Handler:    _Directory_SetRelation_Handler,
		},
		{
			MethodName: "DeleteRelation",
			Handler:    _Directory_DeleteRelation_Handler,
		},
		{
			MethodName: "ListObjectGraph",
			Handler:    _Directory_ListObjectGraph_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _Directory_Check_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Directory_Info_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListObjectTypes",
			Handler:       _Directory_ListObjectTypes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRelationTypes",
			Handler:       _Directory_ListRelationTypes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListPermissions",
			Handler:       _Directory_ListPermissions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRelationTypePermissions",
			Handler:       _Directory_ListRelationTypePermissions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListObjects",
			Handler:       _Directory_ListObjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRelations",
			Handler:       _Directory_ListRelations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Loader",
			Handler:       _Directory_Loader_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "aserto/directory/v2/directory.proto",
}
