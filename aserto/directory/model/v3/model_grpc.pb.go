// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: aserto/directory/model/v3/model.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Model_GetManifest_FullMethodName    = "/aserto.directory.model.v3.Model/GetManifest"
	Model_SetManifest_FullMethodName    = "/aserto.directory.model.v3.Model/SetManifest"
	Model_DeleteManifest_FullMethodName = "/aserto.directory.model.v3.Model/DeleteManifest"
)

// ModelClient is the client API for Model service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelClient interface {
	// get manifest instance
	GetManifest(ctx context.Context, in *GetManifestRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetManifestResponse], error)
	// set manifest instance
	SetManifest(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SetManifestRequest, SetManifestResponse], error)
	// delete manifest instance
	DeleteManifest(ctx context.Context, in *DeleteManifestRequest, opts ...grpc.CallOption) (*DeleteManifestResponse, error)
}

type modelClient struct {
	cc grpc.ClientConnInterface
}

func NewModelClient(cc grpc.ClientConnInterface) ModelClient {
	return &modelClient{cc}
}

func (c *modelClient) GetManifest(ctx context.Context, in *GetManifestRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetManifestResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Model_ServiceDesc.Streams[0], Model_GetManifest_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetManifestRequest, GetManifestResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Model_GetManifestClient = grpc.ServerStreamingClient[GetManifestResponse]

func (c *modelClient) SetManifest(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SetManifestRequest, SetManifestResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Model_ServiceDesc.Streams[1], Model_SetManifest_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SetManifestRequest, SetManifestResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Model_SetManifestClient = grpc.ClientStreamingClient[SetManifestRequest, SetManifestResponse]

func (c *modelClient) DeleteManifest(ctx context.Context, in *DeleteManifestRequest, opts ...grpc.CallOption) (*DeleteManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteManifestResponse)
	err := c.cc.Invoke(ctx, Model_DeleteManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelServer is the server API for Model service.
// All implementations should embed UnimplementedModelServer
// for forward compatibility.
type ModelServer interface {
	// get manifest instance
	GetManifest(*GetManifestRequest, grpc.ServerStreamingServer[GetManifestResponse]) error
	// set manifest instance
	SetManifest(grpc.ClientStreamingServer[SetManifestRequest, SetManifestResponse]) error
	// delete manifest instance
	DeleteManifest(context.Context, *DeleteManifestRequest) (*DeleteManifestResponse, error)
}

// UnimplementedModelServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModelServer struct{}

func (UnimplementedModelServer) GetManifest(*GetManifestRequest, grpc.ServerStreamingServer[GetManifestResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetManifest not implemented")
}
func (UnimplementedModelServer) SetManifest(grpc.ClientStreamingServer[SetManifestRequest, SetManifestResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SetManifest not implemented")
}
func (UnimplementedModelServer) DeleteManifest(context.Context, *DeleteManifestRequest) (*DeleteManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteManifest not implemented")
}
func (UnimplementedModelServer) testEmbeddedByValue() {}

// UnsafeModelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelServer will
// result in compilation errors.
type UnsafeModelServer interface {
	mustEmbedUnimplementedModelServer()
}

func RegisterModelServer(s grpc.ServiceRegistrar, srv ModelServer) {
	// If the following call pancis, it indicates UnimplementedModelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Model_ServiceDesc, srv)
}

func _Model_GetManifest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetManifestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModelServer).GetManifest(m, &grpc.GenericServerStream[GetManifestRequest, GetManifestResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Model_GetManifestServer = grpc.ServerStreamingServer[GetManifestResponse]

func _Model_SetManifest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelServer).SetManifest(&grpc.GenericServerStream[SetManifestRequest, SetManifestResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Model_SetManifestServer = grpc.ClientStreamingServer[SetManifestRequest, SetManifestResponse]

func _Model_DeleteManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).DeleteManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Model_DeleteManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).DeleteManifest(ctx, req.(*DeleteManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Model_ServiceDesc is the grpc.ServiceDesc for Model service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Model_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aserto.directory.model.v3.Model",
	HandlerType: (*ModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteManifest",
			Handler:    _Model_DeleteManifest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetManifest",
			Handler:       _Model_GetManifest_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetManifest",
			Handler:       _Model_SetManifest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "aserto/directory/model/v3/model.proto",
}
