// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: aserto/directory/assertion/v3/assertion.proto

package assertion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Assertion_GetAssertion_FullMethodName    = "/aserto.directory.assertion.v3.Assertion/GetAssertion"
	Assertion_ListAssertions_FullMethodName  = "/aserto.directory.assertion.v3.Assertion/ListAssertions"
	Assertion_SetAssertion_FullMethodName    = "/aserto.directory.assertion.v3.Assertion/SetAssertion"
	Assertion_DeleteAssertion_FullMethodName = "/aserto.directory.assertion.v3.Assertion/DeleteAssertion"
)

// AssertionClient is the client API for Assertion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssertionClient interface {
	GetAssertion(ctx context.Context, in *GetAssertionRequest, opts ...grpc.CallOption) (*GetAssertionResponse, error)
	ListAssertions(ctx context.Context, in *ListAssertionsRequest, opts ...grpc.CallOption) (*ListAssertionsResponse, error)
	SetAssertion(ctx context.Context, in *SetAssertionRequest, opts ...grpc.CallOption) (*SetAssertionResponse, error)
	DeleteAssertion(ctx context.Context, in *DeleteAssertionRequest, opts ...grpc.CallOption) (*DeleteAssertionResponse, error)
}

type assertionClient struct {
	cc grpc.ClientConnInterface
}

func NewAssertionClient(cc grpc.ClientConnInterface) AssertionClient {
	return &assertionClient{cc}
}

func (c *assertionClient) GetAssertion(ctx context.Context, in *GetAssertionRequest, opts ...grpc.CallOption) (*GetAssertionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssertionResponse)
	err := c.cc.Invoke(ctx, Assertion_GetAssertion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assertionClient) ListAssertions(ctx context.Context, in *ListAssertionsRequest, opts ...grpc.CallOption) (*ListAssertionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAssertionsResponse)
	err := c.cc.Invoke(ctx, Assertion_ListAssertions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assertionClient) SetAssertion(ctx context.Context, in *SetAssertionRequest, opts ...grpc.CallOption) (*SetAssertionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAssertionResponse)
	err := c.cc.Invoke(ctx, Assertion_SetAssertion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assertionClient) DeleteAssertion(ctx context.Context, in *DeleteAssertionRequest, opts ...grpc.CallOption) (*DeleteAssertionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAssertionResponse)
	err := c.cc.Invoke(ctx, Assertion_DeleteAssertion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssertionServer is the server API for Assertion service.
// All implementations should embed UnimplementedAssertionServer
// for forward compatibility
type AssertionServer interface {
	GetAssertion(context.Context, *GetAssertionRequest) (*GetAssertionResponse, error)
	ListAssertions(context.Context, *ListAssertionsRequest) (*ListAssertionsResponse, error)
	SetAssertion(context.Context, *SetAssertionRequest) (*SetAssertionResponse, error)
	DeleteAssertion(context.Context, *DeleteAssertionRequest) (*DeleteAssertionResponse, error)
}

// UnimplementedAssertionServer should be embedded to have forward compatible implementations.
type UnimplementedAssertionServer struct {
}

func (UnimplementedAssertionServer) GetAssertion(context.Context, *GetAssertionRequest) (*GetAssertionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssertion not implemented")
}
func (UnimplementedAssertionServer) ListAssertions(context.Context, *ListAssertionsRequest) (*ListAssertionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssertions not implemented")
}
func (UnimplementedAssertionServer) SetAssertion(context.Context, *SetAssertionRequest) (*SetAssertionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAssertion not implemented")
}
func (UnimplementedAssertionServer) DeleteAssertion(context.Context, *DeleteAssertionRequest) (*DeleteAssertionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssertion not implemented")
}

// UnsafeAssertionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssertionServer will
// result in compilation errors.
type UnsafeAssertionServer interface {
	mustEmbedUnimplementedAssertionServer()
}

func RegisterAssertionServer(s grpc.ServiceRegistrar, srv AssertionServer) {
	s.RegisterService(&Assertion_ServiceDesc, srv)
}

func _Assertion_GetAssertion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssertionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssertionServer).GetAssertion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assertion_GetAssertion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssertionServer).GetAssertion(ctx, req.(*GetAssertionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assertion_ListAssertions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssertionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssertionServer).ListAssertions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assertion_ListAssertions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssertionServer).ListAssertions(ctx, req.(*ListAssertionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assertion_SetAssertion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAssertionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssertionServer).SetAssertion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assertion_SetAssertion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssertionServer).SetAssertion(ctx, req.(*SetAssertionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assertion_DeleteAssertion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssertionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssertionServer).DeleteAssertion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assertion_DeleteAssertion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssertionServer).DeleteAssertion(ctx, req.(*DeleteAssertionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Assertion_ServiceDesc is the grpc.ServiceDesc for Assertion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Assertion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aserto.directory.assertion.v3.Assertion",
	HandlerType: (*AssertionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAssertion",
			Handler:    _Assertion_GetAssertion_Handler,
		},
		{
			MethodName: "ListAssertions",
			Handler:    _Assertion_ListAssertions_Handler,
		},
		{
			MethodName: "SetAssertion",
			Handler:    _Assertion_SetAssertion_Handler,
		},
		{
			MethodName: "DeleteAssertion",
			Handler:    _Assertion_DeleteAssertion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aserto/directory/assertion/v3/assertion.proto",
}
