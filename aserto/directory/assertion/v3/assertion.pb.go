// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: aserto/directory/assertion/v3/assertion.proto

package assertion

import (
	v3 "github.com/aserto-dev/go-directory/aserto/directory/common/v3"
	v31 "github.com/aserto-dev/go-directory/aserto/directory/reader/v3"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetAssertionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// assertion identifier
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAssertionRequest) Reset() {
	*x = GetAssertionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssertionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssertionRequest) ProtoMessage() {}

func (x *GetAssertionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssertionRequest.ProtoReflect.Descriptor instead.
func (*GetAssertionRequest) Descriptor() ([]byte, []int) {
	return file_aserto_directory_assertion_v3_assertion_proto_rawDescGZIP(), []int{0}
}

func (x *GetAssertionRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetAssertionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Assert `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GetAssertionResponse) Reset() {
	*x = GetAssertionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssertionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssertionResponse) ProtoMessage() {}

func (x *GetAssertionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssertionResponse.ProtoReflect.Descriptor instead.
func (*GetAssertionResponse) Descriptor() ([]byte, []int) {
	return file_aserto_directory_assertion_v3_assertion_proto_rawDescGZIP(), []int{1}
}

func (x *GetAssertionResponse) GetResult() *Assert {
	if x != nil {
		return x.Result
	}
	return nil
}

type ListAssertionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination request
	Page *v3.PaginationRequest `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListAssertionsRequest) Reset() {
	*x = ListAssertionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssertionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssertionsRequest) ProtoMessage() {}

func (x *ListAssertionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssertionsRequest.ProtoReflect.Descriptor instead.
func (*ListAssertionsRequest) Descriptor() ([]byte, []int) {
	return file_aserto_directory_assertion_v3_assertion_proto_rawDescGZIP(), []int{2}
}

func (x *ListAssertionsRequest) GetPage() *v3.PaginationRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListAssertionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Assert              `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Page    *v3.PaginationResponse `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListAssertionsResponse) Reset() {
	*x = ListAssertionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssertionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssertionsResponse) ProtoMessage() {}

func (x *ListAssertionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssertionsResponse.ProtoReflect.Descriptor instead.
func (*ListAssertionsResponse) Descriptor() ([]byte, []int) {
	return file_aserto_directory_assertion_v3_assertion_proto_rawDescGZIP(), []int{3}
}

func (x *ListAssertionsResponse) GetResults() []*Assert {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ListAssertionsResponse) GetPage() *v3.PaginationResponse {
	if x != nil {
		return x.Page
	}
	return nil
}

type SetAssertionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assert *Assert `protobuf:"bytes,1,opt,name=assert,proto3" json:"assert,omitempty"`
}

func (x *SetAssertionRequest) Reset() {
	*x = SetAssertionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAssertionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAssertionRequest) ProtoMessage() {}

func (x *SetAssertionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAssertionRequest.ProtoReflect.Descriptor instead.
func (*SetAssertionRequest) Descriptor() ([]byte, []int) {
	return file_aserto_directory_assertion_v3_assertion_proto_rawDescGZIP(), []int{4}
}

func (x *SetAssertionRequest) GetAssert() *Assert {
	if x != nil {
		return x.Assert
	}
	return nil
}

type SetAssertionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Assert `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SetAssertionResponse) Reset() {
	*x = SetAssertionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAssertionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAssertionResponse) ProtoMessage() {}

func (x *SetAssertionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAssertionResponse.ProtoReflect.Descriptor instead.
func (*SetAssertionResponse) Descriptor() ([]byte, []int) {
	return file_aserto_directory_assertion_v3_assertion_proto_rawDescGZIP(), []int{5}
}

func (x *SetAssertionResponse) GetResult() *Assert {
	if x != nil {
		return x.Result
	}
	return nil
}

type DeleteAssertionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// assertion identifier
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAssertionRequest) Reset() {
	*x = DeleteAssertionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssertionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssertionRequest) ProtoMessage() {}

func (x *DeleteAssertionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssertionRequest.ProtoReflect.Descriptor instead.
func (*DeleteAssertionRequest) Descriptor() ([]byte, []int) {
	return file_aserto_directory_assertion_v3_assertion_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteAssertionRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteAssertionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// empty result
	Result *emptypb.Empty `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DeleteAssertionResponse) Reset() {
	*x = DeleteAssertionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssertionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssertionResponse) ProtoMessage() {}

func (x *DeleteAssertionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssertionResponse.ProtoReflect.Descriptor instead.
func (*DeleteAssertionResponse) Descriptor() ([]byte, []int) {
	return file_aserto_directory_assertion_v3_assertion_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteAssertionResponse) GetResult() *emptypb.Empty {
	if x != nil {
		return x.Result
	}
	return nil
}

type Assert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// assertion identifier
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// expected outcome of assertion
	Expected bool `protobuf:"varint,2,opt,name=expected,proto3" json:"expected,omitempty"`
	// assertion request
	//
	// Types that are assignable to Msg:
	//
	//	*Assert_Check
	//	*Assert_CheckRelation
	//	*Assert_CheckPermission
	Msg isAssert_Msg `protobuf_oneof:"msg"`
}

func (x *Assert) Reset() {
	*x = Assert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assert) ProtoMessage() {}

func (x *Assert) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_directory_assertion_v3_assertion_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assert.ProtoReflect.Descriptor instead.
func (*Assert) Descriptor() ([]byte, []int) {
	return file_aserto_directory_assertion_v3_assertion_proto_rawDescGZIP(), []int{8}
}

func (x *Assert) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Assert) GetExpected() bool {
	if x != nil {
		return x.Expected
	}
	return false
}

func (m *Assert) GetMsg() isAssert_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *Assert) GetCheck() *v31.CheckRequest {
	if x, ok := x.GetMsg().(*Assert_Check); ok {
		return x.Check
	}
	return nil
}

func (x *Assert) GetCheckRelation() *v31.CheckRelationRequest {
	if x, ok := x.GetMsg().(*Assert_CheckRelation); ok {
		return x.CheckRelation
	}
	return nil
}

func (x *Assert) GetCheckPermission() *v31.CheckPermissionRequest {
	if x, ok := x.GetMsg().(*Assert_CheckPermission); ok {
		return x.CheckPermission
	}
	return nil
}

type isAssert_Msg interface {
	isAssert_Msg()
}

type Assert_Check struct {
	Check *v31.CheckRequest `protobuf:"bytes,3,opt,name=check,proto3,oneof"`
}

type Assert_CheckRelation struct {
	CheckRelation *v31.CheckRelationRequest `protobuf:"bytes,4,opt,name=check_relation,json=checkRelation,proto3,oneof"`
}

type Assert_CheckPermission struct {
	CheckPermission *v31.CheckPermissionRequest `protobuf:"bytes,5,opt,name=check_permission,json=checkPermission,proto3,oneof"`
}

func (*Assert_Check) isAssert_Msg() {}

func (*Assert_CheckRelation) isAssert_Msg() {}

func (*Assert_CheckPermission) isAssert_Msg() {}

var File_aserto_directory_assertion_v3_assertion_proto protoreflect.FileDescriptor

var file_aserto_directory_assertion_v3_assertion_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x33, 0x2f,
	0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1d, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x61, 0x73, 0x65, 0x72,
	0x74, 0x6f, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x33, 0x2f,
	0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x5f, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x33, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x22, 0x9d, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x73, 0x65,
	0x72, 0x74, 0x6f, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x22, 0x59, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f,
	0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x22, 0x55, 0x0a, 0x14, 0x53,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x33, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x2d, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x49, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xbe, 0x02, 0x0a,
	0x06, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f,
	0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x59, 0x0a, 0x0e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x32, 0xa2, 0x09,
	0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xae, 0x02, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x61,
	0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x01, 0x92, 0x41, 0x88, 0x01, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x47, 0x65, 0x74, 0x20, 0x61, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a,
	0x22, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20,
	0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x2a, 0x1a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x33, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x62,
	0x23, 0x0a, 0x13, 0x0a, 0x0f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x12, 0x00, 0x0a, 0x0c, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x33, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x61, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xad, 0x02, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x34, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xad, 0x01, 0x92,
	0x41, 0x85, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x24, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x2a, 0x1c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x33, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6c,
	0x69, 0x73, 0x74, 0x62, 0x23, 0x0a, 0x13, 0x0a, 0x0f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x00, 0x0a, 0x0c, 0x0a, 0x08, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8e, 0x02, 0x0a,
	0x0c, 0x53, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e,
	0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x33, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x92, 0x41, 0x6b, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0d, 0x53, 0x65, 0x74, 0x20, 0x61, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0e, 0x53, 0x65, 0x74, 0x20, 0x61, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a, 0x1a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x33, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x74, 0x62, 0x23, 0x0a, 0x13, 0x0a, 0x0f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x00, 0x0a, 0x0c, 0x0a, 0x08, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a,
	0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa2, 0x02,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74,
	0x6f, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x9f, 0x01, 0x92, 0x41, 0x74, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a, 0x1d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x33, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x62, 0x23, 0x0a, 0x13, 0x0a, 0x0f, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x00, 0x0a, 0x0c, 0x0a, 0x08,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x2a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x67, 0x6f, 0x2d, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x33, 0x3b, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aserto_directory_assertion_v3_assertion_proto_rawDescOnce sync.Once
	file_aserto_directory_assertion_v3_assertion_proto_rawDescData = file_aserto_directory_assertion_v3_assertion_proto_rawDesc
)

func file_aserto_directory_assertion_v3_assertion_proto_rawDescGZIP() []byte {
	file_aserto_directory_assertion_v3_assertion_proto_rawDescOnce.Do(func() {
		file_aserto_directory_assertion_v3_assertion_proto_rawDescData = protoimpl.X.CompressGZIP(file_aserto_directory_assertion_v3_assertion_proto_rawDescData)
	})
	return file_aserto_directory_assertion_v3_assertion_proto_rawDescData
}

var file_aserto_directory_assertion_v3_assertion_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_aserto_directory_assertion_v3_assertion_proto_goTypes = []interface{}{
	(*GetAssertionRequest)(nil),        // 0: aserto.directory.assertion.v3.GetAssertionRequest
	(*GetAssertionResponse)(nil),       // 1: aserto.directory.assertion.v3.GetAssertionResponse
	(*ListAssertionsRequest)(nil),      // 2: aserto.directory.assertion.v3.ListAssertionsRequest
	(*ListAssertionsResponse)(nil),     // 3: aserto.directory.assertion.v3.ListAssertionsResponse
	(*SetAssertionRequest)(nil),        // 4: aserto.directory.assertion.v3.SetAssertionRequest
	(*SetAssertionResponse)(nil),       // 5: aserto.directory.assertion.v3.SetAssertionResponse
	(*DeleteAssertionRequest)(nil),     // 6: aserto.directory.assertion.v3.DeleteAssertionRequest
	(*DeleteAssertionResponse)(nil),    // 7: aserto.directory.assertion.v3.DeleteAssertionResponse
	(*Assert)(nil),                     // 8: aserto.directory.assertion.v3.Assert
	(*v3.PaginationRequest)(nil),       // 9: aserto.directory.common.v3.PaginationRequest
	(*v3.PaginationResponse)(nil),      // 10: aserto.directory.common.v3.PaginationResponse
	(*emptypb.Empty)(nil),              // 11: google.protobuf.Empty
	(*v31.CheckRequest)(nil),           // 12: aserto.directory.reader.v3.CheckRequest
	(*v31.CheckRelationRequest)(nil),   // 13: aserto.directory.reader.v3.CheckRelationRequest
	(*v31.CheckPermissionRequest)(nil), // 14: aserto.directory.reader.v3.CheckPermissionRequest
}
var file_aserto_directory_assertion_v3_assertion_proto_depIdxs = []int32{
	8,  // 0: aserto.directory.assertion.v3.GetAssertionResponse.result:type_name -> aserto.directory.assertion.v3.Assert
	9,  // 1: aserto.directory.assertion.v3.ListAssertionsRequest.page:type_name -> aserto.directory.common.v3.PaginationRequest
	8,  // 2: aserto.directory.assertion.v3.ListAssertionsResponse.results:type_name -> aserto.directory.assertion.v3.Assert
	10, // 3: aserto.directory.assertion.v3.ListAssertionsResponse.page:type_name -> aserto.directory.common.v3.PaginationResponse
	8,  // 4: aserto.directory.assertion.v3.SetAssertionRequest.assert:type_name -> aserto.directory.assertion.v3.Assert
	8,  // 5: aserto.directory.assertion.v3.SetAssertionResponse.result:type_name -> aserto.directory.assertion.v3.Assert
	11, // 6: aserto.directory.assertion.v3.DeleteAssertionResponse.result:type_name -> google.protobuf.Empty
	12, // 7: aserto.directory.assertion.v3.Assert.check:type_name -> aserto.directory.reader.v3.CheckRequest
	13, // 8: aserto.directory.assertion.v3.Assert.check_relation:type_name -> aserto.directory.reader.v3.CheckRelationRequest
	14, // 9: aserto.directory.assertion.v3.Assert.check_permission:type_name -> aserto.directory.reader.v3.CheckPermissionRequest
	0,  // 10: aserto.directory.assertion.v3.Assertion.GetAssertion:input_type -> aserto.directory.assertion.v3.GetAssertionRequest
	2,  // 11: aserto.directory.assertion.v3.Assertion.ListAssertions:input_type -> aserto.directory.assertion.v3.ListAssertionsRequest
	4,  // 12: aserto.directory.assertion.v3.Assertion.SetAssertion:input_type -> aserto.directory.assertion.v3.SetAssertionRequest
	6,  // 13: aserto.directory.assertion.v3.Assertion.DeleteAssertion:input_type -> aserto.directory.assertion.v3.DeleteAssertionRequest
	1,  // 14: aserto.directory.assertion.v3.Assertion.GetAssertion:output_type -> aserto.directory.assertion.v3.GetAssertionResponse
	3,  // 15: aserto.directory.assertion.v3.Assertion.ListAssertions:output_type -> aserto.directory.assertion.v3.ListAssertionsResponse
	5,  // 16: aserto.directory.assertion.v3.Assertion.SetAssertion:output_type -> aserto.directory.assertion.v3.SetAssertionResponse
	7,  // 17: aserto.directory.assertion.v3.Assertion.DeleteAssertion:output_type -> aserto.directory.assertion.v3.DeleteAssertionResponse
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_aserto_directory_assertion_v3_assertion_proto_init() }
func file_aserto_directory_assertion_v3_assertion_proto_init() {
	if File_aserto_directory_assertion_v3_assertion_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aserto_directory_assertion_v3_assertion_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssertionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_directory_assertion_v3_assertion_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssertionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_directory_assertion_v3_assertion_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssertionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_directory_assertion_v3_assertion_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssertionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_directory_assertion_v3_assertion_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAssertionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_directory_assertion_v3_assertion_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAssertionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_directory_assertion_v3_assertion_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAssertionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_directory_assertion_v3_assertion_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAssertionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_directory_assertion_v3_assertion_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aserto_directory_assertion_v3_assertion_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Assert_Check)(nil),
		(*Assert_CheckRelation)(nil),
		(*Assert_CheckPermission)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aserto_directory_assertion_v3_assertion_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aserto_directory_assertion_v3_assertion_proto_goTypes,
		DependencyIndexes: file_aserto_directory_assertion_v3_assertion_proto_depIdxs,
		MessageInfos:      file_aserto_directory_assertion_v3_assertion_proto_msgTypes,
	}.Build()
	File_aserto_directory_assertion_v3_assertion_proto = out.File
	file_aserto_directory_assertion_v3_assertion_proto_rawDesc = nil
	file_aserto_directory_assertion_v3_assertion_proto_goTypes = nil
	file_aserto_directory_assertion_v3_assertion_proto_depIdxs = nil
}
